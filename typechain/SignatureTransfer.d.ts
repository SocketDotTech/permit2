/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";

interface SignatureTransferInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "invalidateUnorderedNonces(uint256,uint256)": FunctionFragment;
    "nonceBitmap(address,uint256)": FunctionFragment;
    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": FunctionFragment;
    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateUnorderedNonces",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceBitmap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFrom",
    values: [
      {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      { to: string; requestedAmount: BigNumberish },
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitWitnessTransferFrom",
    values: [
      {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      { to: string; requestedAmount: BigNumberish },
      string,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateUnorderedNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonceBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitWitnessTransferFrom",
    data: BytesLike
  ): Result;

  events: {
    "UnorderedNonceInvalidation(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UnorderedNonceInvalidation"): EventFragment;
}

export type UnorderedNonceInvalidationEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    owner: string;
    word: BigNumber;
    mask: BigNumber;
  }
>;

export class SignatureTransfer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SignatureTransferInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  invalidateUnorderedNonces(
    wordPos: BigNumberish,
    mask: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonceBitmap(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish };
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish },
    owner: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish }[];
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish }[],
    owner: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish };
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish },
    owner: string,
    witness: BytesLike,
    witnessTypeString: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
    permit: {
      permitted: { token: string; amount: BigNumberish }[];
      nonce: BigNumberish;
      deadline: BigNumberish;
    },
    transferDetails: { to: string; requestedAmount: BigNumberish }[],
    owner: string,
    witness: BytesLike,
    witnessTypeString: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UnorderedNonceInvalidation(address,uint256,uint256)"(
      owner?: string | null,
      word?: null,
      mask?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; word: BigNumber; mask: BigNumber }
    >;

    UnorderedNonceInvalidation(
      owner?: string | null,
      word?: null,
      mask?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; word: BigNumber; mask: BigNumber }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invalidateUnorderedNonces(
      wordPos: BigNumberish,
      mask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonceBitmap(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish };
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish },
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
      permit: {
        permitted: { token: string; amount: BigNumberish }[];
        nonce: BigNumberish;
        deadline: BigNumberish;
      },
      transferDetails: { to: string; requestedAmount: BigNumberish }[],
      owner: string,
      witness: BytesLike,
      witnessTypeString: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
